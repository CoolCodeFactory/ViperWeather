//
//  AddPresenter.swift
//  Architecture
//
//  Created Dmitri Utmanov on 19/02/16.
//  Copyright Â© 2016 Dmitriy Utmanov. All rights reserved.
//
//  Generated by Swift-Viper templates. Find latest version at https://github.com/Nikita2k/SwiftViper
//

import UIKit


protocol AddViewControllerDelegate: class {
    
    func addViewControllerDidSelectCity(city: City)
}

protocol AddPresenterProtocol: class {

    weak var delegate: AddViewControllerDelegate? { get set }
    
    func cancel()
    func getCitiesWithName(name: String?)
    func selectCity(city: City)
    func selectAndSaveCity(city: City)
}

protocol AddInterfaceProtocol: class {
    
    var presenter: AddPresenterProtocol!  { get set }
    
    func showEmpty()
    func showCities(cities: [City])
}

class AddPresenter {

	weak private var interface: AddInterfaceProtocol!
	private let interactor: AddInteractorInputProtocol
    private let router: AddRouterInputProtocol

    weak var delegate: AddViewControllerDelegate?

    
    init(interface: AddInterfaceProtocol, interactor: AddInteractorInputProtocol, router: AddRouterInputProtocol) {
        self.interface = interface
        self.interactor = interactor
        self.router = router
    }
}

extension AddPresenter: AddPresenterProtocol {
    
    func cancel() {
        self.router.closeAddViewController(viewController: self.interface as! UIViewController)
    }
    
    func getCitiesWithName(name: String?) {
        guard let name = name else {
            self.interface.showEmpty()
            return
        }
        guard name.isEmpty != true else {
            self.interface.showEmpty()
            return
        }
        self.interactor.getCitiesWithName(name)
    }
    
    func selectAndSaveCity(city: City) {
        self.interactor.saveCity(city)
        self.router.closeAddViewController(viewController: interface as! UIViewController)
    }
    
    func selectCity(city: City) {
        self.delegate?.addViewControllerDidSelectCity(city)
        self.router.closeAddViewController(viewController: interface as! UIViewController)
    }
}

extension AddPresenter: AddInteractorOutputProtocol {
    
    func foundCities(cities: [City]) {
        self.interface.showCities(cities)
    }
}
